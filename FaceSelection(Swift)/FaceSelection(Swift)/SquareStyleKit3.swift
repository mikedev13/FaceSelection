//
//  SquareStyleKit3.swift
//  (null)
//
//  Created by Mike Forster on 5/18/18.
//  Copyright Â© 2018 (null). All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class SquareStyleKit3 : NSObject {

    //// Drawing Methods

    @objc dynamic public class func drawCanvas1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 200, height: 133), resizing: ResizingBehavior = .aspectFit, pressed: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 200, height: 133), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 200, y: resizedFrame.height / 133)


        //// Color Declarations
        let color2 = UIColor(red: 1.000, green: 0.000, blue: 0.452, alpha: 1.000)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 111, y: 34, width: 39, height: 39))
        UIColor.blue.setStroke()
        rectanglePath.lineWidth = 2
        rectanglePath.stroke()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: 34, y: 39, width: 39, height: 37))
        color2.setStroke()
        rectangle2Path.lineWidth = 2
        rectangle2Path.stroke()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 82, y: 69, width: 27, height: 27))
        color2.setStroke()
        rectangle3Path.lineWidth = 2
        rectangle3Path.stroke()


        if (pressed) {
            //// Text Drawing
            let textRect = CGRect(x: 29, y: 111, width: 93, height: 12)
            let textTextContent = "GENDER"
            let textStyle = NSMutableParagraphStyle()
            textStyle.alignment = .left
            let textFontAttributes = [
                .font: UIFont.systemFont(ofSize: UIFont.labelFontSize),
                .foregroundColor: UIColor.black,
                .paragraphStyle: textStyle,
            ] as [NSAttributedStringKey: Any]

            let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
            context.saveGState()
            context.clip(to: textRect)
            textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
            context.restoreGState()
        }
        
        context.restoreGState()

    }




    @objc(SquareStyleKit3ResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
